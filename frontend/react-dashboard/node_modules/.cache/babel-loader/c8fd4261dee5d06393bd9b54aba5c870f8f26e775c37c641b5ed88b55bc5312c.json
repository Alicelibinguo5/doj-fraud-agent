{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000\n});\nexport const analyzeCases = async params => {\n  try {\n    const response = await api.post('/analyze/', {\n      max_pages: params.maxPages,\n      max_cases: params.maxCases,\n      fraud_type: params.fraudType === 'Any' ? null : params.fraudType\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(`Analysis failed: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message}`);\n  }\n};\nexport const getJobStatus = async jobId => {\n  try {\n    const response = await api.get(`/job/${jobId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    throw new Error(`Failed to get job status: ${((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || error.message}`);\n  }\n};\nexport const pollJobStatus = async (jobId, onProgress) => {\n  const maxAttempts = 60; // 2 minutes with 2-second intervals\n  let attempts = 0;\n  while (attempts < maxAttempts) {\n    try {\n      const jobData = await getJobStatus(jobId);\n      if (onProgress) {\n        onProgress(jobData);\n      }\n      if (jobData.status === 'done') {\n        return jobData.result;\n      }\n      if (jobData.status === 'error') {\n        throw new Error(jobData.error || 'Job failed');\n      }\n\n      // Wait 2 seconds before next poll\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      attempts++;\n    } catch (error) {\n      throw error;\n    }\n  }\n  throw new Error('Job polling timed out');\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_BACKEND_URL","api","create","baseURL","timeout","analyzeCases","params","response","post","max_pages","maxPages","max_cases","maxCases","fraud_type","fraudType","data","error","_error$response","_error$response$data","Error","detail","message","getJobStatus","jobId","get","_error$response2","_error$response2$data","pollJobStatus","onProgress","maxAttempts","attempts","jobData","status","result","Promise","resolve","setTimeout"],"sources":["/Users/aliceguo/src/doj-reseach-agent/frontend/react-dashboard/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n});\n\nexport const analyzeCases = async (params) => {\n  try {\n    const response = await api.post('/analyze/', {\n      max_pages: params.maxPages,\n      max_cases: params.maxCases,\n      fraud_type: params.fraudType === 'Any' ? null : params.fraudType\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(`Analysis failed: ${error.response?.data?.detail || error.message}`);\n  }\n};\n\nexport const getJobStatus = async (jobId) => {\n  try {\n    const response = await api.get(`/job/${jobId}`);\n    return response.data;\n  } catch (error) {\n    throw new Error(`Failed to get job status: ${error.response?.data?.detail || error.message}`);\n  }\n};\n\nexport const pollJobStatus = async (jobId, onProgress) => {\n  const maxAttempts = 60; // 2 minutes with 2-second intervals\n  let attempts = 0;\n  \n  while (attempts < maxAttempts) {\n    try {\n      const jobData = await getJobStatus(jobId);\n      \n      if (onProgress) {\n        onProgress(jobData);\n      }\n      \n      if (jobData.status === 'done') {\n        return jobData.result;\n      }\n      \n      if (jobData.status === 'error') {\n        throw new Error(jobData.error || 'Job failed');\n      }\n      \n      // Wait 2 seconds before next poll\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      attempts++;\n      \n    } catch (error) {\n      throw error;\n    }\n  }\n  \n  throw new Error('Job polling timed out');\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,IAAI,uBAAuB;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAG,MAAOC,MAAM,IAAK;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,WAAW,EAAE;MAC3CC,SAAS,EAAEH,MAAM,CAACI,QAAQ;MAC1BC,SAAS,EAAEL,MAAM,CAACM,QAAQ;MAC1BC,UAAU,EAAEP,MAAM,CAACQ,SAAS,KAAK,KAAK,GAAG,IAAI,GAAGR,MAAM,CAACQ;IACzD,CAAC,CAAC;IACF,OAAOP,QAAQ,CAACQ,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACd,MAAM,IAAIC,KAAK,CAAC,oBAAoB,EAAAF,eAAA,GAAAD,KAAK,CAACT,QAAQ,cAAAU,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBE,MAAM,KAAIJ,KAAK,CAACK,OAAO,EAAE,CAAC;EACtF;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAOC,KAAK,IAAK;EAC3C,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMN,GAAG,CAACuB,GAAG,CAAC,QAAQD,KAAK,EAAE,CAAC;IAC/C,OAAOhB,QAAQ,CAACQ,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAS,gBAAA,EAAAC,qBAAA;IACd,MAAM,IAAIP,KAAK,CAAC,6BAA6B,EAAAM,gBAAA,GAAAT,KAAK,CAACT,QAAQ,cAAAkB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBV,IAAI,cAAAW,qBAAA,uBAApBA,qBAAA,CAAsBN,MAAM,KAAIJ,KAAK,CAACK,OAAO,EAAE,CAAC;EAC/F;AACF,CAAC;AAED,OAAO,MAAMM,aAAa,GAAG,MAAAA,CAAOJ,KAAK,EAAEK,UAAU,KAAK;EACxD,MAAMC,WAAW,GAAG,EAAE,CAAC,CAAC;EACxB,IAAIC,QAAQ,GAAG,CAAC;EAEhB,OAAOA,QAAQ,GAAGD,WAAW,EAAE;IAC7B,IAAI;MACF,MAAME,OAAO,GAAG,MAAMT,YAAY,CAACC,KAAK,CAAC;MAEzC,IAAIK,UAAU,EAAE;QACdA,UAAU,CAACG,OAAO,CAAC;MACrB;MAEA,IAAIA,OAAO,CAACC,MAAM,KAAK,MAAM,EAAE;QAC7B,OAAOD,OAAO,CAACE,MAAM;MACvB;MAEA,IAAIF,OAAO,CAACC,MAAM,KAAK,OAAO,EAAE;QAC9B,MAAM,IAAIb,KAAK,CAACY,OAAO,CAACf,KAAK,IAAI,YAAY,CAAC;MAChD;;MAEA;MACA,MAAM,IAAIkB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MACvDL,QAAQ,EAAE;IAEZ,CAAC,CAAC,OAAOd,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;EAEA,MAAM,IAAIG,KAAK,CAAC,uBAAuB,CAAC;AAC1C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
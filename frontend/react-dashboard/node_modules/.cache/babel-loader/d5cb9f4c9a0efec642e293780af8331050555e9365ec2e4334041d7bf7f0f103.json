{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_BACKEND_URL||'http://localhost:8000';const api=axios.create({baseURL:API_BASE_URL,timeout:30000});export const analyzeCases=async params=>{try{const response=await api.post('/analyze/',{max_pages:params.maxPages,max_cases:params.maxCases,fraud_type:params.fraudType==='Any'?null:params.fraudType});return response.data;}catch(error){var _error$response,_error$response$data;throw new Error(`Analysis failed: ${((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.detail)||error.message}`);}};export const getJobStatus=async jobId=>{try{const response=await api.get(`/job/${jobId}`);return response.data;}catch(error){var _error$response2,_error$response2$data;throw new Error(`Failed to get job status: ${((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.detail)||error.message}`);}};export const pollJobStatus=async(jobId,onProgress)=>{const maxAttempts=60;// 2 minutes with 2-second intervals\nlet attempts=0;while(attempts<maxAttempts){try{const jobData=await getJobStatus(jobId);if(onProgress){onProgress(jobData);}if(jobData.status==='done'){return jobData.result;}if(jobData.status==='error'){throw new Error(jobData.error||'Job failed');}// Wait 2 seconds before next poll\nawait new Promise(resolve=>setTimeout(resolve,2000));attempts++;}catch(error){throw error;}}throw new Error('Job polling timed out');};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_BACKEND_URL","api","create","baseURL","timeout","analyzeCases","params","response","post","max_pages","maxPages","max_cases","maxCases","fraud_type","fraudType","data","error","_error$response","_error$response$data","Error","detail","message","getJobStatus","jobId","get","_error$response2","_error$response2$data","pollJobStatus","onProgress","maxAttempts","attempts","jobData","status","result","Promise","resolve","setTimeout"],"sources":["/Users/aliceguo/src/doj-reseach-agent/frontend/react-dashboard/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n});\n\nexport const analyzeCases = async (params) => {\n  try {\n    const response = await api.post('/analyze/', {\n      max_pages: params.maxPages,\n      max_cases: params.maxCases,\n      fraud_type: params.fraudType === 'Any' ? null : params.fraudType\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(`Analysis failed: ${error.response?.data?.detail || error.message}`);\n  }\n};\n\nexport const getJobStatus = async (jobId) => {\n  try {\n    const response = await api.get(`/job/${jobId}`);\n    return response.data;\n  } catch (error) {\n    throw new Error(`Failed to get job status: ${error.response?.data?.detail || error.message}`);\n  }\n};\n\nexport const pollJobStatus = async (jobId, onProgress) => {\n  const maxAttempts = 60; // 2 minutes with 2-second intervals\n  let attempts = 0;\n  \n  while (attempts < maxAttempts) {\n    try {\n      const jobData = await getJobStatus(jobId);\n      \n      if (onProgress) {\n        onProgress(jobData);\n      }\n      \n      if (jobData.status === 'done') {\n        return jobData.result;\n      }\n      \n      if (jobData.status === 'error') {\n        throw new Error(jobData.error || 'Job failed');\n      }\n      \n      // Wait 2 seconds before next poll\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      attempts++;\n      \n    } catch (error) {\n      throw error;\n    }\n  }\n  \n  throw new Error('Job polling timed out');\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,YAAY,CAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,EAAI,uBAAuB,CAEjF,KAAM,CAAAC,GAAG,CAAGL,KAAK,CAACM,MAAM,CAAC,CACvBC,OAAO,CAAEN,YAAY,CACrBO,OAAO,CAAE,KACX,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAO,CAAAC,MAAM,EAAK,CAC5C,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAN,GAAG,CAACO,IAAI,CAAC,WAAW,CAAE,CAC3CC,SAAS,CAAEH,MAAM,CAACI,QAAQ,CAC1BC,SAAS,CAAEL,MAAM,CAACM,QAAQ,CAC1BC,UAAU,CAAEP,MAAM,CAACQ,SAAS,GAAK,KAAK,CAAG,IAAI,CAAGR,MAAM,CAACQ,SACzD,CAAC,CAAC,CACF,MAAO,CAAAP,QAAQ,CAACQ,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,KAAAC,eAAA,CAAAC,oBAAA,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,oBAAoB,EAAAF,eAAA,CAAAD,KAAK,CAACT,QAAQ,UAAAU,eAAA,kBAAAC,oBAAA,CAAdD,eAAA,CAAgBF,IAAI,UAAAG,oBAAA,iBAApBA,oBAAA,CAAsBE,MAAM,GAAIJ,KAAK,CAACK,OAAO,EAAE,CAAC,CACtF,CACF,CAAC,CAED,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAO,CAAAC,KAAK,EAAK,CAC3C,GAAI,CACF,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAN,GAAG,CAACuB,GAAG,CAAC,QAAQD,KAAK,EAAE,CAAC,CAC/C,MAAO,CAAAhB,QAAQ,CAACQ,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,KAAAS,gBAAA,CAAAC,qBAAA,CACd,KAAM,IAAI,CAAAP,KAAK,CAAC,6BAA6B,EAAAM,gBAAA,CAAAT,KAAK,CAACT,QAAQ,UAAAkB,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgBV,IAAI,UAAAW,qBAAA,iBAApBA,qBAAA,CAAsBN,MAAM,GAAIJ,KAAK,CAACK,OAAO,EAAE,CAAC,CAC/F,CACF,CAAC,CAED,MAAO,MAAM,CAAAM,aAAa,CAAG,KAAAA,CAAOJ,KAAK,CAAEK,UAAU,GAAK,CACxD,KAAM,CAAAC,WAAW,CAAG,EAAE,CAAE;AACxB,GAAI,CAAAC,QAAQ,CAAG,CAAC,CAEhB,MAAOA,QAAQ,CAAGD,WAAW,CAAE,CAC7B,GAAI,CACF,KAAM,CAAAE,OAAO,CAAG,KAAM,CAAAT,YAAY,CAACC,KAAK,CAAC,CAEzC,GAAIK,UAAU,CAAE,CACdA,UAAU,CAACG,OAAO,CAAC,CACrB,CAEA,GAAIA,OAAO,CAACC,MAAM,GAAK,MAAM,CAAE,CAC7B,MAAO,CAAAD,OAAO,CAACE,MAAM,CACvB,CAEA,GAAIF,OAAO,CAACC,MAAM,GAAK,OAAO,CAAE,CAC9B,KAAM,IAAI,CAAAb,KAAK,CAACY,OAAO,CAACf,KAAK,EAAI,YAAY,CAAC,CAChD,CAEA;AACA,KAAM,IAAI,CAAAkB,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,IAAI,CAAC,CAAC,CACvDL,QAAQ,EAAE,CAEZ,CAAE,MAAOd,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,KAAM,IAAI,CAAAG,KAAK,CAAC,uBAAuB,CAAC,CAC1C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}